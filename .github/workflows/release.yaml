name: Publish release to Maven Central

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run without actually publishing'
        required: false
        type: boolean
        default: false

env:
  PACKAGE_VERSION: ${{ github.event.inputs.version }}
  # Enhanced Gradle options for multiplatform builds
  GRADLE_OPTS: >-
    -Dorg.gradle.jvmargs=-Xmx12g
    -XX:MaxMetaspaceSize=3g
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+UseG1GC
    -XX:G1HeapRegionSize=32m
    -XX:+UseStringDeduplication
    -XX:+OptimizeStringConcat
    -Dorg.gradle.daemon=true
    -Dorg.gradle.parallel=true
    -Dorg.gradle.caching=true
    -Dorg.gradle.configureondemand=false
    -Dkotlin.incremental=true
    -Dkotlin.daemon.jvm.options=-Xmx8g
    -Dfile.encoding=UTF-8

jobs:
  validate:
    name: Validate version and inputs
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      is_prerelease: ${{ steps.validate.outputs.is_prerelease }}
    steps:
      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-SUFFIX"
            exit 1
          fi
          
          echo "✅ Version format is valid: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a prerelease
          if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "📦 This will be marked as a prerelease"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "📦 This will be marked as a stable release"
          fi

  publish:
    name: Publish & Release to Maven Central
    needs: validate
    runs-on: macos-latest
    outputs:
      artifact_url: ${{ steps.publish.outputs.artifact_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          cache-write-only: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle
        uses: burrunan/gradle-cache-action@v3

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: 'latest-stable'

      - name: Create gradle.properties for publishing
        run: |
          cat >> gradle.properties << 'EOF'
          # Memory optimization for multiplatform builds
          org.gradle.jvmargs=-Xmx12g -XX:MaxMetaspaceSize=3g -XX:+UseG1GC
          org.gradle.daemon=true
          org.gradle.parallel=true
          org.gradle.caching=true
          kotlin.incremental=true
          kotlin.daemon.jvm.options=-Xmx8g
          
          # Publishing configuration
          signing.gnupg.useLegacyGpg=false
          systemProp.org.gradle.internal.publish.checksums.insecure=true
          EOF

      - name: Validate build before publishing
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: |
          echo "🧪 Running dry run - validating build..."
          ./gradlew build --stacktrace --max-workers=3
        env:
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}

      - name: Publish to Maven Central
        if: ${{ github.event.inputs.dry_run != 'true' }}
        id: publish
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.GPG_SIGNING_KEY_ID }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.GPG_PASSPHRASE }}
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}
        run: |
          echo "📦 Publishing version ${{ env.PACKAGE_VERSION }} to Maven Central..."
          ./gradlew publishAndReleaseToMavenCentral --no-configuration-cache --stacktrace --max-workers=3
          
          # Output artifact information for later steps
          echo "artifact_url=https://central.sonatype.com/search?q=${{ github.repository }}" >> $GITHUB_OUTPUT

      - name: Upload heap dumps on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: heap-dumps-publish
          path: |
            **/*.hprof
            **/build/reports/
          retention-days: 3

  release:
    name: Create GitHub release
    needs: [validate, publish]
    if: ${{ github.event.inputs.dry_run != 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Get the latest tag for comparison
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [[ -n "$LATEST_TAG" ]]; then
            echo "📋 Generating release notes since $LATEST_TAG..."
            RELEASE_NOTES=$(git log --pretty=format:"- %s (%h)" $LATEST_TAG..HEAD | head -20)
          else
            echo "📋 No previous tags found, generating initial release notes..."
            RELEASE_NOTES=$(git log --pretty=format:"- %s (%h)" --max-count=20)
          fi
          
          # Create release notes with additional context
          cat > release_notes.md << EOF
          ## 🚀 What's New in v${VERSION}
          
          ${RELEASE_NOTES}
          
          ## 📦 Installation
          
          Add this to your \`build.gradle.kts\`:
          
          \`\`\`kotlin
          dependencies {
              implementation("${{ github.repository }}:${VERSION}")
          }
          \`\`\`
          
          ## 🔗 Links
          
          - [Maven Central](${{ needs.publish.outputs.artifact_url }})
          - [Documentation](https://github.com/${{ github.repository }}/tree/v${VERSION}#readme)
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...v${VERSION}
          EOF

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: v${{ needs.validate.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease }}
          generate_release_notes: false
          make_latest: ${{ needs.validate.outputs.is_prerelease == 'false' }}

      - name: Update version in gradle.properties
        run: |
          # Update the version in gradle.properties
          if grep -q "^version=" gradle.properties; then
            sed -i "s/^version=.*/version=${{ needs.validate.outputs.version }}/" gradle.properties
          elif grep -q "^defaultVersion=" gradle.properties; then
            sed -i "s/^defaultVersion=.*/defaultVersion=${{ needs.validate.outputs.version }}/" gradle.properties
          else
            echo "version=${{ needs.validate.outputs.version }}" >> gradle.properties
          fi
          
          echo "📝 Updated gradle.properties with version ${{ needs.validate.outputs.version }}"

      - name: Commit version bump
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🔖 Bump version to ${{ needs.validate.outputs.version }}"
          file_pattern: gradle.properties
          commit_user_name: github-actions[bot]
          commit_user_email: github-actions[bot]@users.noreply.github.com

  notify:
    name: Notify completion
    needs: [validate, publish, release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "## 📊 Publishing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Prerelease:** ${{ needs.validate.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run:** ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.publish.result }}" == "success" ]]; then
            echo "✅ **Publish:** Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Publish:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.release.result }}" == "success" ]]; then
            echo "✅ **Release:** Successful" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "⏭️ **Release:** Skipped (dry run)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Release:** Failed" >> $GITHUB_STEP_SUMMARY
          fi